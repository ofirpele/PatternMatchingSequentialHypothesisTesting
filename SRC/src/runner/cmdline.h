/* cmdline.h */

/* File autogenerated by gengetopt version 2.19.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "hs"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "0.1"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *full_help_help; /* Print help, including hidden options, and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char * pattern_arg;	/* The file name of the pattern image..  */
  char * pattern_orig;	/* The file name of the pattern image. original value given at command line.  */
  const char *pattern_help; /* The file name of the pattern image. help description.  */
  char * mask_arg;	/* The file name of the pattern mask image (0<->not in mask, other values<->in mask). If not given all pixels are considered..  */
  char * mask_orig;	/* The file name of the pattern mask image (0<->not in mask, other values<->in mask). If not given all pixels are considered. original value given at command line.  */
  const char *mask_help; /* The file name of the pattern mask image (0<->not in mask, other values<->in mask). If not given all pixels are considered. help description.  */
  char * images_arg;	/* The file name of the image, or, (if ends with '/') the name of the directory containing the images..  */
  char * images_orig;	/* The file name of the image, or, (if ends with '/') the name of the directory containing the images. original value given at command line.  */
  const char *images_help; /* The file name of the image, or, (if ends with '/') the name of the directory containing the images. help description.  */
  int print_found_windows_flag;	/* The program will print to the standard output the top left of the masked windows where the pattern was found and the distance of each masked window to the pattern. The format of the output is: y x distance. x and y starts from 0. (default=off).  */
  const char *print_found_windows_help; /* The program will print to the standard output the top left of the masked windows where the pattern was found and the distance of each masked window to the pattern. The format of the output is: y x distance. x and y starts from 0. help description.  */
  int no_show_flag;	/* The program will not show the places where the pattern was found. (default=off).  */
  const char *no_show_help; /* The program will not show the places where the pattern was found. help description.  */
  char * dist_arg;	/* Type of distance (possible values: abs,gt-pairs). abs: ''Thresholded Absolute Difference'' from the paper. gt-pairs: ''Monotonic Relations'' from the paper. (default='gt-pairs').  */
  char * dist_orig;	/* Type of distance (possible values: abs,gt-pairs). abs: ''Thresholded Absolute Difference'' from the paper. gt-pairs: ''Monotonic Relations'' from the paper. original value given at command line.  */
  const char *dist_help; /* Type of distance (possible values: abs,gt-pairs). abs: ''Thresholded Absolute Difference'' from the paper. gt-pairs: ''Monotonic Relations'' from the paper. help description.  */
  int thresh_arg;	/* Threshold for distance. 0 <= thresh <=50. Defaults: gt-pairs = 0, abs = 20..  */
  char * thresh_orig;	/* Threshold for distance. 0 <= thresh <=50. Defaults: gt-pairs = 0, abs = 20. original value given at command line.  */
  const char *thresh_help; /* Threshold for distance. 0 <= thresh <=50. Defaults: gt-pairs = 0, abs = 20. help description.  */
  double outliers_arg;	/* Maximum percent of outliers allowed. i.e: Similar windows are if the Hamming distance is smaller or equal to (outliers/100)*num_of_features. Defaults: gt-pairs = 25, abs = 40..  */
  char * outliers_orig;	/* Maximum percent of outliers allowed. i.e: Similar windows are if the Hamming distance is smaller or equal to (outliers/100)*num_of_features. Defaults: gt-pairs = 25, abs = 40. original value given at command line.  */
  const char *outliers_help; /* Maximum percent of outliers allowed. i.e: Similar windows are if the Hamming distance is smaller or equal to (outliers/100)*num_of_features. Defaults: gt-pairs = 25, abs = 40. help description.  */
  char * match_arg;	/* Matching algorithm (possible values: exact, seq). seq is the P-SPRT sequential procedure from the paper. (default='seq').  */
  char * match_orig;	/* Matching algorithm (possible values: exact, seq). seq is the P-SPRT sequential procedure from the paper. original value given at command line.  */
  const char *match_help; /* Matching algorithm (possible values: exact, seq). seq is the P-SPRT sequential procedure from the paper. help description.  */
  double fn_arg;	/* Bound on false negative error rate, only needed when matching is with sampling (match=seq). (default='0.1').  */
  char * fn_orig;	/* Bound on false negative error rate, only needed when matching is with sampling (match=seq). original value given at command line.  */
  const char *fn_help; /* Bound on false negative error rate, only needed when matching is with sampling (match=seq). help description.  */
  int gt_neighbor_arg;	/* A pixel (x',y') is greater than it's neighbor (x,y) when: g(x,y) > g(x',y')+gt-neighbor. thresh should be <= than gt-neighbor. (default='80').  */
  char * gt_neighbor_orig;	/* A pixel (x',y') is greater than it's neighbor (x,y) when: g(x,y) > g(x',y')+gt-neighbor. thresh should be <= than gt-neighbor. original value given at command line.  */
  const char *gt_neighbor_help; /* A pixel (x',y') is greater than it's neighbor (x,y) when: g(x,y) > g(x',y')+gt-neighbor. thresh should be <= than gt-neighbor. help description.  */
  int max_neighbor_arg;	/* Maximum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') when the Euclidean distance between them is less than or equal to max-neighbor-val. (default='3').  */
  char * max_neighbor_orig;	/* Maximum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') when the Euclidean distance between them is less than or equal to max-neighbor-val. original value given at command line.  */
  const char *max_neighbor_help; /* Maximum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') when the Euclidean distance between them is less than or equal to max-neighbor-val. help description.  */
  int min_neighbor_arg;	/* Minimum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') if if the Euclidean distance between them is greater than or equal to max-neighbor-val. (default='1').  */
  char * min_neighbor_orig;	/* Minimum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') if if the Euclidean distance between them is greater than or equal to max-neighbor-val. original value given at command line.  */
  const char *min_neighbor_help; /* Minimum distance of a neighbor. i.e: (x,y) is a neighbor of (x',y') if if the Euclidean distance between them is greater than or equal to max-neighbor-val. help description.  */
  int window_size_arg;	/* The pattern is divided into windows of window-size. (default='1').  */
  char * window_size_orig;	/* The pattern is divided into windows of window-size. original value given at command line.  */
  const char *window_size_help; /* The pattern is divided into windows of window-size. help description.  */
  int max_from_window_arg;	/* From each window a maximum of max-from-window pixels pairs is taken. If not given it's the maximum number of pixels pairs possible..  */
  char * max_from_window_orig;	/* From each window a maximum of max-from-window pixels pairs is taken. If not given it's the maximum number of pixels pairs possible. original value given at command line.  */
  const char *max_from_window_help; /* From each window a maximum of max-from-window pixels pairs is taken. If not given it's the maximum number of pixels pairs possible. help description.  */
  char * find_arg;	/* Type of find (possible values: min, lessOutliers). min: finds only the windows with the minimum distance. lessOutliers: finds all windows that have a distance which is smaller or equal to (outliers/100)*num_of_features (default='lessOutliers').  */
  char * find_orig;	/* Type of find (possible values: min, lessOutliers). min: finds only the windows with the minimum distance. lessOutliers: finds all windows that have a distance which is smaller or equal to (outliers/100)*num_of_features original value given at command line.  */
  const char *find_help; /* Type of find (possible values: min, lessOutliers). min: finds only the windows with the minimum distance. lessOutliers: finds all windows that have a distance which is smaller or equal to (outliers/100)*num_of_features help description.  */
  int show_dilate_border_arg;	/* The size of dilation of the border of the mask that will be shown will be 2*val-1. Should be => 1 (default='2').  */
  char * show_dilate_border_orig;	/* The size of dilation of the border of the mask that will be shown will be 2*val-1. Should be => 1 original value given at command line.  */
  const char *show_dilate_border_help; /* The size of dilation of the border of the mask that will be shown will be 2*val-1. Should be => 1 help description.  */
  char * save_arg;	/* If given results will be saved in the given directory..  */
  char * save_orig;	/* If given results will be saved in the given directory. original value given at command line.  */
  const char *save_help; /* If given results will be saved in the given directory. help description.  */
  int run_time_arg;	/* Number of iterations that the program will do in order to measure running time. Note that if it's <=0 no run time information will be displayed. (default='0').  */
  char * run_time_orig;	/* Number of iterations that the program will do in order to measure running time. Note that if it's <=0 no run time information will be displayed. original value given at command line.  */
  const char *run_time_help; /* Number of iterations that the program will do in order to measure running time. Note that if it's <=0 no run time information will be displayed. help description.  */
  char * run_time_file_name_arg;	/* The file name that the run time (in seconds) will be written to. If not given it's written only to stdout..  */
  char * run_time_file_name_orig;	/* The file name that the run time (in seconds) will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *run_time_file_name_help; /* The file name that the run time (in seconds) will be written to. If not given it's written only to stdout. help description.  */
  int statistics_arg;	/* Number of iterations that the program will do in order to check the statistics - average false negative and average iterations. Note that if it's <=0 no statistics will be displayed. Should not be given with exact. (default='0').  */
  char * statistics_orig;	/* Number of iterations that the program will do in order to check the statistics - average false negative and average iterations. Note that if it's <=0 no statistics will be displayed. Should not be given with exact. original value given at command line.  */
  const char *statistics_help; /* Number of iterations that the program will do in order to check the statistics - average false negative and average iterations. Note that if it's <=0 no statistics will be displayed. Should not be given with exact. help description.  */
  char * false_negative_filename_arg;	/* The file name that the false negative error rate (windows that are similar i.e: are smaller than the (outliers/100)*pattern_size, that were classified as not similar) will be written to. If not given it's written only to stdout..  */
  char * false_negative_filename_orig;	/* The file name that the false negative error rate (windows that are similar i.e: are smaller than the (outliers/100)*pattern_size, that were classified as not similar) will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *false_negative_filename_help; /* The file name that the false negative error rate (windows that are similar i.e: are smaller than the (outliers/100)*pattern_size, that were classified as not similar) will be written to. If not given it's written only to stdout. help description.  */
  char * iterations_filename_arg;	/* The file name that the average iterations per window will be written to. If not given it's written only to stdout..  */
  char * iterations_filename_orig;	/* The file name that the average iterations per window will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *iterations_filename_help; /* The file name that the average iterations per window will be written to. If not given it's written only to stdout. help description.  */
  char * expected_detections_image_arg;	/* The file name of the expected detections image. Same size as the given image (-I option). The values in this map are: EXPECTED_DETECT= 255; NOT_EXPECTED_DETECT= 0; DOES_NOT_MATTER_EXPECTED_DETECT= 100.  */
  char * expected_detections_image_orig;	/* The file name of the expected detections image. Same size as the given image (-I option). The values in this map are: EXPECTED_DETECT= 255; NOT_EXPECTED_DETECT= 0; DOES_NOT_MATTER_EXPECTED_DETECT= 100 original value given at command line.  */
  const char *expected_detections_image_help; /* The file name of the expected detections image. Same size as the given image (-I option). The values in this map are: EXPECTED_DETECT= 255; NOT_EXPECTED_DETECT= 0; DOES_NOT_MATTER_EXPECTED_DETECT= 100 help description.  */
  int detections_it_arg;	/* Number of iterations that the program will do in order to measure detection and running time. Note that if it's <=0 no detections and false detections information will be displayed. (default='0').  */
  char * detections_it_orig;	/* Number of iterations that the program will do in order to measure detection and running time. Note that if it's <=0 no detections and false detections information will be displayed. original value given at command line.  */
  const char *detections_it_help; /* Number of iterations that the program will do in order to measure detection and running time. Note that if it's <=0 no detections and false detections information will be displayed. help description.  */
  char * detections_rate_filename_arg;	/* The file name that the average detection rate (percent of images that at least one of the expected was found, out of all iterations on images that contains expected) will be written to. If not given it's written only to stdout..  */
  char * detections_rate_filename_orig;	/* The file name that the average detection rate (percent of images that at least one of the expected was found, out of all iterations on images that contains expected) will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *detections_rate_filename_help; /* The file name that the average detection rate (percent of images that at least one of the expected was found, out of all iterations on images that contains expected) will be written to. If not given it's written only to stdout. help description.  */
  char * false_detections_rate_filename_arg;	/* The file name that the average false detection rate (percent of images that at least one of the not expected was found, out of all iterations on images that contains not expected) will be written to. If not given it's written only to stdout..  */
  char * false_detections_rate_filename_orig;	/* The file name that the average false detection rate (percent of images that at least one of the not expected was found, out of all iterations on images that contains not expected) will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *false_detections_rate_filename_help; /* The file name that the average false detection rate (percent of images that at least one of the not expected was found, out of all iterations on images that contains not expected) will be written to. If not given it's written only to stdout. help description.  */
  char * false_detections_rate_in_image_filename_arg;	/* The file name that the average false detection rate (percent of places that were found and were not expect to be found, out of all not expected places) will be written to. If not given it's written only to stdout..  */
  char * false_detections_rate_in_image_filename_orig;	/* The file name that the average false detection rate (percent of places that were found and were not expect to be found, out of all not expected places) will be written to. If not given it's written only to stdout. original value given at command line.  */
  const char *false_detections_rate_in_image_filename_help; /* The file name that the average false detection rate (percent of places that were found and were not expect to be found, out of all not expected places) will be written to. If not given it's written only to stdout. help description.  */
  int LU_off_flag;	/* The program will not use the LU jump technique (will be more accurate but slower). (default=off).  */
  const char *LU_off_help; /* The program will not use the LU jump technique (will be more accurate but slower). help description.  */
  int LU_min_num_of_LU_pixels_arg;	/* Minimum number of LU pixels in the LU mask (default='30').  */
  char * LU_min_num_of_LU_pixels_orig;	/* Minimum number of LU pixels in the LU mask original value given at command line.  */
  const char *LU_min_num_of_LU_pixels_help; /* Minimum number of LU pixels in the LU mask help description.  */
  int LU_gt_neighbor_arg;	/* Same as gt-neighbor for finding LU rank of pairs. default: abs=5 gt-pairs=20.  */
  char * LU_gt_neighbor_orig;	/* Same as gt-neighbor for finding LU rank of pairs. default: abs=5 gt-pairs=20 original value given at command line.  */
  const char *LU_gt_neighbor_help; /* Same as gt-neighbor for finding LU rank of pairs. default: abs=5 gt-pairs=20 help description.  */
  double LU_fn_arg;	/* same as --fn for LU stage (default='0.1').  */
  char * LU_fn_orig;	/* same as --fn for LU stage original value given at command line.  */
  const char *LU_fn_help; /* same as --fn for LU stage help description.  */
  double LU_outliers_arg;	/* same as --outliers for LU stage. Default: equals to outliers.  */
  char * LU_outliers_orig;	/* same as --outliers for LU stage. Default: equals to outliers original value given at command line.  */
  const char *LU_outliers_help; /* same as --outliers for LU stage. Default: equals to outliers help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int full_help_given ;	/* Whether full-help was given.  */
  int version_given ;	/* Whether version was given.  */
  int pattern_given ;	/* Whether pattern was given.  */
  int mask_given ;	/* Whether mask was given.  */
  int images_given ;	/* Whether images was given.  */
  int print_found_windows_given ;	/* Whether print-found-windows was given.  */
  int no_show_given ;	/* Whether no-show was given.  */
  int dist_given ;	/* Whether dist was given.  */
  int thresh_given ;	/* Whether thresh was given.  */
  int outliers_given ;	/* Whether outliers was given.  */
  int match_given ;	/* Whether match was given.  */
  int fn_given ;	/* Whether fn was given.  */
  int gt_neighbor_given ;	/* Whether gt-neighbor was given.  */
  int max_neighbor_given ;	/* Whether max-neighbor was given.  */
  int min_neighbor_given ;	/* Whether min-neighbor was given.  */
  int window_size_given ;	/* Whether window-size was given.  */
  int max_from_window_given ;	/* Whether max-from-window was given.  */
  int find_given ;	/* Whether find was given.  */
  int show_dilate_border_given ;	/* Whether show-dilate-border was given.  */
  int save_given ;	/* Whether save was given.  */
  int run_time_given ;	/* Whether run-time was given.  */
  int run_time_file_name_given ;	/* Whether run-time-file-name was given.  */
  int statistics_given ;	/* Whether statistics was given.  */
  int false_negative_filename_given ;	/* Whether false-negative-filename was given.  */
  int iterations_filename_given ;	/* Whether iterations-filename was given.  */
  int expected_detections_image_given ;	/* Whether expected-detections-image was given.  */
  int detections_it_given ;	/* Whether detections-it was given.  */
  int detections_rate_filename_given ;	/* Whether detections-rate-filename was given.  */
  int false_detections_rate_filename_given ;	/* Whether false-detections-rate-filename was given.  */
  int false_detections_rate_in_image_filename_given ;	/* Whether false-detections-rate-in-image-filename was given.  */
  int LU_off_given ;	/* Whether LU-off was given.  */
  int LU_min_num_of_LU_pixels_given ;	/* Whether LU-min-num-of-LU-pixels was given.  */
  int LU_gt_neighbor_given ;	/* Whether LU-gt-neighbor was given.  */
  int LU_fn_given ;	/* Whether LU-fn was given.  */
  int LU_outliers_given ;	/* Whether LU-outliers was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];
extern const char *gengetopt_args_info_full_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_full_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */


// Copyright (c) 2012, Ofir Pele
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: 
//    * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//    * Neither the name of the The Hebrew University of Jerusalem nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
